name: Provision AWS infrastructure

on:
  pull_request:
    branches:
      - 'deploy-*'
      - 'release-*'
    types:
      - opened
      - synchronize
      - reopened
    paths:
      - 'terraform/**'

  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Target branch to deploy from'
        required: true
        default: 'main'
        type: string
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  AWS_REGION: ap-south-1
  TERRAFORM_VERSION: 1.6.0
  ANSIBLE_VERSION: 2.19.2
  PYTHON_VERSION: 3.11

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.target_branch || github.ref }}

      - name: Extract version from branch
        id: extract_version
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BRANCH_NAME="${{ github.base_ref }}"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            BRANCH_NAME="${{ github.event.inputs.target_branch }}"
          else
            BRANCH_NAME="${{ github.ref_name }}"
          fi
          
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          # Extract version if it's a release branch
          if [[ $BRANCH_NAME =~ ^release-([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
            VERSION="${BASH_REMATCH[1]}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            echo "version=snapshot" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Display deployment info
        run: |
          echo "Event Type: ${{ github.event_name }}"
          echo "Branch: ${{ steps.extract_version.outputs.branch_name }}"
          echo "Version: ${{ steps.extract_version.outputs.version }}"
          echo "Is Release: ${{ steps.extract_version.outputs.is_release }}"
          echo "Environment: ${{ github.event.inputs.environment || 'dev' }}"

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: deploy
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.target_branch || github.ref }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Check Terraform state bucket existence
        run: |
          set -e
          BUCKET_NAME="valtech-ota-tfstate-bucket"
          echo "Checking if Terraform S3 bucket '$BUCKET_NAME' exists..."
          
          if aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            echo "Bucket '$BUCKET_NAME' already exists."
          else
            echo "Bucket not found. Creating via bootstrap Terraform..."
            terraform -chdir=terraform/bootstrap init -input=false
            terraform -chdir=terraform/bootstrap apply -auto-approve
          fi

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Validate
        run: |
          cd terraform
          terraform validate

      - name: Terraform Plan
        id: tf-plan
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
        run: |
          cd terraform
          terraform plan -detailed-exitcode -no-color -out=tfplan \
          || export exitcode=$?
          
          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
          
          if [ $exitcode -eq 1 ]; then
          echo "Terraform Plan Failed!"
          exit 1
          else
          exit 0
          fi

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: |
            terraform/tfplan
            terraform/tfplan.txt

      - name: Create Plan Summary for PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN_OUTPUT: ${{ steps.tf-plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan ðŸ“–\`${{ steps.tf-plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform
            ${process.env.PLAN_OUTPUT}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Create Plan Summary for Manual Dispatch
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "## Terraform Plan ðŸ“–" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.event.inputs.target_branch }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "<details><summary>Show Plan</summary>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f terraform/tfplan.txt ]; then
            cat terraform/tfplan.txt >> $GITHUB_STEP_SUMMARY
          else
            echo "Plan output not available" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "</details>" >> $GITHUB_STEP_SUMMARY

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-plan
    env:
      TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
    if: |
      needs.terraform-plan.outputs.tfplanExitCode == '0' && 
      (github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main')
    environment:
      name: ${{ github.event.inputs.environment || 'dev' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.target_branch || github.ref }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: terraform/

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve tfplan

      - name: Get Terraform Outputs
        id: tf-outputs
        run: |
          cd terraform
          echo "rds_endpoint=$(terraform output -raw rds_endpoint)" >> $GITHUB_OUTPUT
          echo "cluster_name=$(terraform output -raw cluster_name)" >> $GITHUB_OUTPUT
          echo "rds_name=$(terraform output -raw rds_name)" >> $GITHUB_OUTPUT
          echo "rds_username=$(terraform output -raw rds_username)" >> $GITHUB_OUTPUT
          echo "rds_password=$(terraform output -raw rds_password)" >> $GITHUB_OUTPUT
          terraform output -json > ../ansible/terraform_outputs.json

      - name: Upload Terraform Outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: ansible/terraform_outputs.json

      - name: Mask RDS Password
        run: echo "::add-mask::${{ steps.tf-outputs.outputs.rds_password }}"

    outputs:
      rds_endpoint: ${{ steps.tf-outputs.outputs.rds_endpoint }}
      cluster_name: ${{ steps.tf-outputs.outputs.cluster_name }}
      rds_name: ${{ steps.tf-outputs.outputs.rds_name }}
      rds_username: ${{ steps.tf-outputs.outputs.rds_username }}
      rds_password: ${{ steps.tf-outputs.outputs.rds_password }}

  argocd-deploy:
    name: Deploy ArgoCD
    runs-on: ubuntu-latest
    needs: terraform-apply

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.target_branch || github.ref }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      #using the azure template to set up kubectl on AWS EKS
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Generate kubeconfig
        id: kubeconfig
        run: |
          aws eks --region ${{ env.AWS_REGION }} update-kubeconfig --name ${{ needs.terraform-apply.outputs.cluster_name }}

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.12.3'

      - name: Deploy ArgoCD using Helm
        run: |
          helm repo add argo https://argoproj.github.io/argo-helm
          helm repo update
          helm upgrade --install argocd argo/argo-cd --namespace argocd --create-namespace -f terraform/argocd-values.yaml