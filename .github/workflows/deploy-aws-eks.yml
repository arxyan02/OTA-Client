name: Deploy Spring Boot Services to AWS EKS

on:
  pull_request:
    branches:
      - 'release-*'
    types:
      - opened
      - synchronize
      - reopened

  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Target branch to deploy from'
        required: true
        default: 'main'
        type: string
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  AWS_REGION: ap-south-1
  TERRAFORM_VERSION: 1.6.0
  ANSIBLE_VERSION: 2.19.2
  PYTHON_VERSION: 3.11

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.target_branch || github.ref }}

      - name: Extract version from branch
        id: extract_version
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BRANCH_NAME="${{ github.base_ref }}"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            BRANCH_NAME="${{ github.event.inputs.target_branch }}"
          else
            BRANCH_NAME="${{ github.ref_name }}"
          fi
          
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          # Extract version if it's a release branch
          if [[ $BRANCH_NAME =~ ^release-([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
            VERSION="${BASH_REMATCH[1]}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            echo "version=snapshot" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Display deployment info
        run: |
          echo "Event Type: ${{ github.event_name }}"
          echo "Branch: ${{ steps.extract_version.outputs.branch_name }}"
          echo "Version: ${{ steps.extract_version.outputs.version }}"
          echo "Is Release: ${{ steps.extract_version.outputs.is_release }}"
          echo "Environment: ${{ github.event.inputs.environment || 'dev' }}"

  validate:
    name: Validate Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Format Check
        run: |
          cd terraform
          terraform fmt -check -recursive

      - name: Terraform Init
        run: |
          cd terraform
          terraform init -backend=false

      - name: Terraform Validate
        run: |
          cd terraform
          terraform validate

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Ansible and dependencies
        run: |
          pip install --upgrade pip
          pip install ansible-core==${{ env.ANSIBLE_VERSION }} ansible-lint kubernetes boto3 botocore
        env:
          PIP_NO_CACHE_DIR: 1

      - name: Install Ansible Collections
        run: |
          cd ansible && cd aws
          ansible-galaxy collection install -r requirements.yml

      - name: Ansible Lint
        run: |
          ansible-lint ansible/

      - name: Ansible Syntax Check
        run: |
          ansible-playbook -i ansible/aws/inventory/hosts.yml ansible/aws/setup-cluster.yml --syntax-check
          ansible-playbook -i ansible/aws/inventory/hosts.yml ansible/aws/deploy-services.yml --syntax-check

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name != 'pull_request'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get short SHA
        id: meta
        run: |
          echo "tags=sha-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          echo "date=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

      - name: Build and push campaign-management
        uses: docker/build-push-action@v5
        with:
          context: ./campaign-management
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/synergy/ota-update/campaign-management:${{ steps.meta.outputs.tags }}
            ${{ steps.login-ecr.outputs.registry }}/synergy/ota-update/campaign-management:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push firmware-management
        uses: docker/build-push-action@v5
        with:
          context: ./firmware-management
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/synergy/ota-update/firmware-management:${{ steps.meta.outputs.tags }}
            ${{ steps.login-ecr.outputs.registry }}/synergy/ota-update/firmware-management:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push update-management
        uses: docker/build-push-action@v5
        with:
          context: ./update-management
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/synergy/ota-update/update-management:${{ steps.meta.outputs.tags }}
            ${{ steps.login-ecr.outputs.registry }}/synergy/ota-update/update-management:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push vehicle-management
        uses: docker/build-push-action@v5
        with:
          context: ./vehicle-management
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/synergy/ota-update/vehicle-management:${{ steps.meta.outputs.tags }}
            ${{ steps.login-ecr.outputs.registry }}/synergy/ota-update/vehicle-management:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: validate
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Plan
        id: tf-plan
        run: |
          cd terraform
          terraform plan -detailed-exitcode -no-color -out=tfplan \
            -var="db_password=${{ needs.terraform-apply.outputs.rds_password }}" \
            || export exitcode=$?
          
          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
          
          if [ $exitcode -eq 1 ]; then
            echo "Terraform Plan Failed!"
            exit 1
          else
            exit 0
          fi

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: terraform/tfplan

      - name: Create Plan Summary
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN_OUTPUT: ${{ steps.tf-plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan 📖\`${{ steps.tf-plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform
            ${process.env.PLAN_OUTPUT}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: [ terraform-plan, build-and-push ]
    if: github.ref == 'refs/heads/main' && needs.terraform-plan.outputs.tfplanExitCode == 2
    environment:
      name: ${{ github.event.inputs.environment || 'dev' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: terraform/

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve tfplan

      - name: Get Terraform Outputs
        id: tf-outputs
        run: |
          cd terraform
          echo "rds_endpoint=$(terraform output -raw rds_endpoint)" >> $GITHUB_OUTPUT
          echo "cluster_name=$(terraform output -raw cluster_name)" >> $GITHUB_OUTPUT
          terraform output -json > ../ansible/terraform_outputs.json

      - name: Upload Terraform Outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: ansible/terraform_outputs.json

    outputs:
      rds_endpoint: ${{ steps.tf-outputs.outputs.rds_endpoint }}
      cluster_name: ${{ steps.tf-outputs.outputs.cluster_name }}

  deploy-services:
    name: Deploy Services with Ansible
    runs-on: ubuntu-latest
    needs: terraform-apply
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install ansible==${{ env.ANSIBLE_VERSION }} kubernetes boto3 botocore
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin

      - name: Download Terraform Outputs
        uses: actions/download-artifact@v4
        with:
          name: terraform-outputs
          path: ansible/

      - name: Install Ansible Collections
        run: |
          cd ansible
          ansible-galaxy collection install -r requirements.yml

      - name: Get AWS Account ID
        id: aws-account
        run: |
          echo "account_id=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_OUTPUT

      - name: Setup EKS Cluster
        run: |
          cd ansible
          ansible-playbook -i inventory/hosts.yml setup-cluster.yml \
            -e cluster_name="${{ needs.terraform-apply.outputs.cluster_name }}" \
            -e aws_account_id="${{ steps.aws-account.outputs.account_id }}" \
            -e aws_region="${{ env.AWS_REGION }}"

      - name: Deploy Spring Boot Services
        run: |
          cd ansible
          ansible-playbook -i inventory/hosts.yml deploy-services.yml \
            -e cluster_name="${{ needs.terraform-apply.outputs.cluster_name }}" \
            -e rds_endpoint="${{ needs.terraform-apply.outputs.rds_endpoint }}" \
            -e db_name="${{ needs.terraform-apply.outputs.rds_name }}" \
            -e db_username="${{ needs.terraform-apply.outputs.rds_username }}" \
            -e db_password="${{ needs.terraform-apply.outputs.rds_password }}" \
            -e aws_region="${{ env.AWS_REGION }}" \
            -e service_version="${{ needs.build-and-push.outputs.image-tag }}"

      - name: Get Service URLs
        run: |
          kubectl config use-context $(kubectl config current-context)
          kubectl get ingress -n valtech-ota-dev -o wide

      - name: Deployment Summary
        run: |
          echo "## Deployment Summary 🚀" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment || 'dev' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Cluster:** ${{ needs.terraform-apply.outputs.cluster_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**RDS Endpoint:** ${{ needs.terraform-apply.outputs.rds_endpoint }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image Tag:** ${{ needs.build-and-push.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Services Deployed:" >> $GITHUB_STEP_SUMMARY
          echo "- campaign-management" >> $GITHUB_STEP_SUMMARY
          echo "- firmware-management" >> $GITHUB_STEP_SUMMARY
          echo "- update-management" >> $GITHUB_STEP_SUMMARY
          echo "- vehicle-management" >> $GITHUB_STEP_SUMMARY

  notify:
    name: Send Deployment Notification
    runs-on: ubuntu-latest
    needs: [ deploy-services ]
    if: always()
    steps:
      - name: Deployment Status
        run: |
          if [ "${{ needs.deploy-services.result }}" == "success" ]; then
            echo "✅ Deployment completed successfully!"
          else
            echo "❌ Deployment failed!"
            exit 1
          fi